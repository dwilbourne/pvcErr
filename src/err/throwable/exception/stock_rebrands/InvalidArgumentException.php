<?php declare(strict_types = 1);

namespace pvc\err\throwable\exception\stock_rebrands;

use pvc\err\throwable\ErrorExceptionConstants as ec;
use pvc\msg\ErrorExceptionMsg;
use Throwable;

/**
 *
 * Originally, InvalidArgument exceptions would be thrown if a parameter did not conform to the expected type.
 *
 * With type hinting available, this function handles a smaller scope of issues, but still useful for occasions
 * when a parameter can be of different types, or a parameter is meant to take on one of a specific set of values
 * of the same type.
 *
 * The PHP library does not use this exception itself (it throws a TypeError instead for arguments of the wrong type),
 * so this exception can only be generated by throwing it explicitly in your code.
 *
 * Example:
 *
 *    function Test($t) {
 *        if (is_string($t) || is_number($t)) {
 *            echo "<div>" . $t . "</div>"; }
 *        }
 *        else {
 *            $s = "bad argument (%s) - must be a string or a number."
 *            $msg = sprintf($s, json_encode($t));
 *            throw new pvc\InvalidArgumentException($msg);
 *        }
 *    }
 *
 */
class InvalidArgumentException extends Exception
{
    public function __construct(ErrorExceptionMsg $msg, int $code = 0, Throwable $previous = null)
    {
        if ($code == 0) {
            $code = ec::INVALID_ARGUMENT_EXCEPTION;
        }
        parent::__construct($msg, $code, $previous);
    }
}
